struct Course {
    char courseName[5];
    int learned;
    int courseNameSize;
    char pre[500];
    int length;
};

int HashFunc(char key[], int TableSize,int size){
    int HashVal;
    HashVal= 0;
    int i;
    i=0;
    while(i!=size){
        int t;
        t = key[i];
        HashVal = HashVal*32 + t;
        i = i+1;
    }
    int quotient;
    quotient = HashVal / TableSize;
    int rem;
    rem = HashVal - quotient*TableSize;
    return rem;
}

int main(){
    char temp;
    int con;
    con=1;
    int i,j,k,z;
    struct Course type1[100];
    int index;
    index=0;
    int count,t;
    count=0;
    int inEnd;
    inEnd=1;
    int totalGot,totalTried,totalHave,totalScore;
    totalGot=0;
    totalTried=0;
    totalHave=0;
    totalScore=0;
    int totalCourse;
    totalCourse=0;
    char test[2];
    char zero;
    zero=test[1];
    char A,B,C,D,F;
    A='A';
    B='B';
    C='C';
    D='D';
    F='F';

    while(inEnd==1){ 
        con=1;
        cin>>temp;
        if(temp!=endl){
            totalCourse=totalCourse+1;
            index=0;
            while(con==1){
                if(temp=='|'){
                    type1[count].courseNameSize=index;
                    index=0;
                    con=0;
                }
                else{
                    type1[count].courseName[index]=temp;
                    index=index+1;
                    cin>>temp;
                }
            }
            
            int credit;
            cin>>credit;
            totalHave=totalHave+credit;
            
            cin>>temp;
            con=1;
            index=0;
            int length;
            length=0;
            while(con==1){
                cin>>temp;
                if(temp=='|'){
                    type1[count].length=index;
                    con=0;
                }
                else{
                    type1[count].pre[index]=temp;
                    index=index+1;
                }
            }
            
            cin>>temp;
            if(temp==endl){
                type1[count].learned=-1;
                count=count+1;
            }
            else{
                if(temp==A){
                    t=4;
                    totalScore=totalScore+4*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                    type1[count].learned=1;
                }
                else if(temp==B){
                    t=3;
                    totalScore=totalScore+3*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                    type1[count].learned=1;
                }
                else if(temp==C){
                    t=2;
                    totalScore=totalScore+2*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                    type1[count].learned=1;
                }
                else if(temp==D){
                    t=1;
                    totalScore=totalScore+1*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                    type1[count].learned=1;
                }
                else if(temp==F){
                    t=0;
                    totalTried=totalTried+credit;
                    type1[count].learned=-1;
                }
                cin>>temp;
                count=count+1;
            }
        }
        else{
            inEnd=0;
            
        }
    }
    
    int totalRemain;
    totalRemain=totalHave-totalGot;
    double res1;
    if(totalGot!=0){
        res1=1.0*totalScore/totalTried;
    }
    else{
        res1=0.0;
    }
    cout<<"GPA: "<<res1<<endl;
    cout<<"Hours Attempted: "<<totalTried<<endl;
    cout<<"Hours Completed: "<<totalGot<<endl;
    cout<<"Credits Remaining: "<<totalRemain<<endl;
    cout << endl;

    cout<<"Possible Courses to Take Next" << endl;
    int courseNum;
    courseNum=0;
    
    int tHash,tableSize,nameSize;
    tHash=0;
    tableSize=1000;
    int myHashTable[1000];
    char tName[5];
    int credited;
    for(i=0;i<totalCourse;i=i+1){
        for(j=0;j<5;j=j+1){
            tName[j]=type1[i].courseName[j];
        }
        nameSize=type1[i].courseNameSize;
        tHash=HashFunc(tName[],tableSize,nameSize);
        
        credited=type1[i].learned;
        if(myHashTable[tHash]==0){
            if(credited==-1){
                myHashTable[tHash]=1;
            }
            else{
                myHashTable[tHash]=2;
            }
        }
        else if(myHashTable[tHash]!=0){
            myHashTable[tHash]=3;
        } 
    }
    
    int isOk,flag;
    isOk=0;
    for(i=0;i<totalCourse;i=i+1){
        if(type1[i].learned==-1){
            
            if(type1[i].length==0){
                courseNum=1;
                cout << "  ";
                for(j=0; j<type1[i].courseNameSize; j=j+1){
                    cout << type1[i].courseName[j];
                }
                cout << endl;
                
            }
            else{
                isOk=1;
                index=0;
                for(j=0;j<type1[i].length;j=j+1){
                    temp=type1[i].pre[j];
                    if((temp==',')||(temp==';')){
                        
                        for(z=index;z<5;z=z+1){
                            tName[z]=zero;
                        }
                        tHash=HashFunc(tName[],tableSize,index);
                        index=0;
                        if(myHashTable[tHash]==0){
                            if(isOk==1){
                                isOk=0;
                            }
                        }
                        else if(myHashTable[tHash]==1){
                            if(isOk==1){
                                isOk=0;
                            }
                        }
                        else if(myHashTable[tHash]==2){
                            if(isOk==1){
                                isOk=1;
                            }
                        }
                        else{
                            
                            for(k=0;k<totalCourse;k=k+1){
                                flag=1;
                                for(z=0;z<5;z=z+1){
                                    if(type1[k].courseName[z]!=tName[z]){
                                        flag=-1;
                                        z=5;
                                    }
                                }
                                if(flag==1){
                                    
                                    if((type1[k].learned==1)&&(isOk==1)){
                                        isOk=1;
                                    }
                                    else{
                                        isOk=-1;
                                    }
                                    k=totalCourse;
                                }
                            }
                        }
                        if(temp==';'){
                            if(isOk==1){
                                j=type1[i].length;
                            }
                            else{
                                isOk=1;
                            }
                        }
                    }
                    else{
                        tName[index]=temp;
                        index=index+1;
                    }
                }
                
                
                if(temp!=';'){
                    nameSize=index;
                    for(z=index;z<5;z=z+1){
                        tName[z]=zero;
                    }
                    tHash=HashFunc(tName[],tableSize,nameSize);
                    if(myHashTable[tHash]==0){
                        if(isOk==1){
                            isOk=0;
                        }
                    }
                    else if(myHashTable[tHash]==1){
                        if(isOk==1){
                            isOk=0;
                        }
                    }
                    else if(myHashTable[tHash]==2){
                        if(isOk==1){
                            isOk=1;
                        }
                    }
                    else{
                    
                        for(k=0;k<totalCourse;k=k+1){
                            flag=1;
                            for(z=0;z<5;z=z+1){
                                if(type1[k].courseName[z]!=tName[z]){
                                    flag=-1;
                                    z=5;
                                }
                            }
                            if(flag==1){
                                
                                if((type1[k].learned==1)&&(isOk==1)){
                                    isOk=1;
                                }
                                else{
                                    isOk=-1;
                                }
                                k=totalCourse;
                            }
                        }
                    }
                }
                if(isOk==1){
                    
                    courseNum=1;
                    cout << "  ";
                    for(j=0; j<type1[i].courseNameSize; j=j+1){
                        cout << type1[i].courseName[j];
                    }
                    cout << endl;
                }
            }
        }
    }

    if(courseNum==0){
        cout<<"  None - Congratulations!"<<endl;
    }

    return 0;
}

