struct Course {
    char course_name[5];
    int credits;
    char pre[500];
    int grade;
};

int main(){
    char temp;
    int con;
    con=1;
    struct Course type1[100];
    int index;
    index=0;
    int count,t;
    count=0;
    int inEnd;
    inEnd=1;
    int totalGot,totalTried,totalHave,totalScore;
    totalGot=0;
    totalTried=0;
    totalHave=0;
    totalScore=0;
    char A,B,C,D,F;
    A='A';
    B='B';
    C='C';
    D='D';
    F='F';

    while(inEnd==1){
        con=1;
        cin>>temp;
        if(temp!=endl){
            while(con==1){
                if(temp=='|'){
                    index=0;
                    con=0;
                }
                else{
                    type1[count].course_name[index]=temp;
                    index=index+1;
                    cin>>temp;
                }
            }

            int credit;
            cin>>credit;
            totalHave=totalHave+credit;

            cin>>temp;
            con=1;
            index=0;
            int length;
            length=0;
            while(con==1){
                cin>>temp;
                if(temp=='|'){
                    length=index;
                    con=0;
                }
                else{
                    type1[count].conditions[index]=temp;
                    index=index+1;
                }
            }
            
            cin>>temp;
            if(temp==endl){
                type1[count].grade=-1;
                count=count+1;
            }
            else{
                if(temp==A){
                    t=4;
                    totalScore=totalScore+4*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                }
                else if(temp==B){
                    t=3;
                    totalScore=totalScore+3*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                }
                else if(temp==C){
                    t=2;
                    totalScore=totalScore+2*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                }
                else if(temp==D){
                    t=1;
                    totalScore=totalScore+1*credit;
                    totalTried=totalTried+credit;
                    totalGot=totalGot+credit;
                }
                else if(temp==F){
                    t=0;
                    totalTried=totalTried+credit;
                }
                type1[count].grade=t;
                cin>>temp;
                count=count+1;
            }
        }
        else{
            inEnd=0;
        }
    }

    int totalRemain;
    totalRemain=totalHave-totalGot;
    double res1;
    if(totalGot!=0){
        res1=1.0*totalScore/totalGot;
    }
    else{
        res1=0;
    }
    cout<<"GPA:"<<res1<<endl;
    cout<<"Hours Attempted:"<<totalTried<<endl;
    cout<<"Hours Completed:"<<totalGot<<endl;
    cout<<"credits Remaining:"<<totalRemain<<endl;
}